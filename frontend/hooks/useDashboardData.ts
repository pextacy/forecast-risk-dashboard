import { useState, useEffect } from 'react';\nimport useSWR from 'swr';\nimport { apiClient } from '../lib/api';\n\ninterface DashboardData {\n  portfolioValue: number;\n  portfolioChange: number;\n  riskLevel: string;\n  activeForecasts: number;\n  accuracy: number;\n  lastUpdate: string;\n}\n\ninterface DashboardState {\n  data: DashboardData | null;\n  isLoading: boolean;\n  error: Error | null;\n}\n\nconst fetcher = async (url: string) => {\n  const response = await apiClient.get(url);\n  return response.data;\n};\n\nexport function useDashboardData(): DashboardState {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Fetch portfolio data\n  const { data: portfolioData, error: portfolioError } = useSWR(\n    '/api/v1/balances/current',\n    fetcher,\n    { refreshInterval: 30000 }\n  );\n\n  // Fetch latest forecasts\n  const { data: forecastsData, error: forecastsError } = useSWR(\n    '/api/v1/forecasts/latest',\n    fetcher,\n    { refreshInterval: 60000 }\n  );\n\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Calculate portfolio metrics\n        const portfolioValue = portfolioData?.total_usd_value || 0;\n        const portfolioChange = calculatePortfolioChange(portfolioData) || 0;\n        \n        // Get risk level from latest risk analysis\n        let riskLevel = 'Medium';\n        try {\n          if (portfolioData?.portfolio_weights) {\n            const riskResponse = await apiClient.get('/api/v1/balances/risk-summary', {\n              params: {\n                portfolio_weights: JSON.stringify(portfolioData.portfolio_weights)\n              }\n            });\n            riskLevel = riskResponse.data.overall_risk_level || 'Medium';\n          }\n        } catch (err) {\n          console.warn('Risk level calculation failed:', err);\n        }\n\n        // Count active forecasts\n        const activeForecasts = forecastsData?.latest_forecasts?.length || 0;\n\n        // Calculate forecast accuracy (mock for now)\n        const accuracy = calculateForecastAccuracy(forecastsData) || 85;\n\n        const data: DashboardData = {\n          portfolioValue,\n          portfolioChange,\n          riskLevel: capitalizeFirst(riskLevel),\n          activeForecasts,\n          accuracy,\n          lastUpdate: new Date().toLocaleTimeString()\n        };\n\n        setDashboardData(data);\n      } catch (err) {\n        console.error('Dashboard data loading failed:', err);\n        setError(err as Error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (portfolioData || forecastsData) {\n      loadDashboardData();\n    } else if (!portfolioError && !forecastsError) {\n      setIsLoading(true);\n    } else {\n      setError(portfolioError || forecastsError || new Error('Data loading failed'));\n      setIsLoading(false);\n    }\n  }, [portfolioData, forecastsData, portfolioError, forecastsError]);\n\n  return {\n    data: dashboardData,\n    isLoading,\n    error\n  };\n}\n\nfunction calculatePortfolioChange(portfolioData: any): number {\n  // This would typically compare current value to previous day\n  // For now, return a mock positive change\n  if (!portfolioData?.total_usd_value) return 0;\n  \n  // Simulate daily change calculation\n  return 2.4; // +2.4%\n}\n\nfunction calculateForecastAccuracy(forecastsData: any): number {\n  if (!forecastsData?.latest_forecasts) return 85;\n  \n  // Calculate average accuracy from forecasts that have accuracy scores\n  const forecasts = forecastsData.latest_forecasts;\n  const accurateForecasts = forecasts.filter((f: any) => f.accuracy_score !== null);\n  \n  if (accurateForecasts.length === 0) return 85;\n  \n  const avgAccuracy = accurateForecasts.reduce((sum: number, f: any) => \n    sum + (f.accuracy_score * 100), 0) / accurateForecasts.length;\n  \n  return Math.round(avgAccuracy);\n}\n\nfunction capitalizeFirst(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}"